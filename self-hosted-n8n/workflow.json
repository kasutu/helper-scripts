{
  "name": "Telegram Audio to Calendar (Local LLM)",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"]
      },
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [260, 240],
      "webhookId": "telegram-calendar",
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credential",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "audio-check",
              "leftValue": "={{ $json.message.voice || $json.message.audio }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-audio",
      "name": "Check if Audio",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [480, 240]
    },
    {
      "parameters": {
        "operation": "getFile",
        "fileId": "={{ $json.message.voice?.file_id || $json.message.audio?.file_id }}"
      },
      "id": "get-audio-file",
      "name": "Get Audio File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [700, 180],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credential",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://whisper:9000/asr",
        "sendBinaryData": true,
        "binaryPropertyName": "data",
        "options": {
          "bodyContentType": "multipart-form-data",
          "useQueryString": false,
          "splitIntoItems": false,
          "followRedirect": true,
          "followAllRedirects": false,
          "ignoreHttpStatusErrors": false,
          "proxy": "",
          "timeout": 10000,
          "retry": {
            "enabled": false
          }
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "audio_file",
              "type": "formBinaryData",
              "inputDataFieldName": "data"
            },
            {
              "name": "task",
              "value": "transcribe"
            },
            {
              "name": "language",
              "value": "en"
            },
            {
              "name": "output",
              "value": "json"
            }
          ]
        }
      },
      "id": "transcribe-audio",
      "name": "Transcribe Audio (Local Whisper)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [920, 180]
    },
    {
      "parameters": {
        "messages": {
          "values": [
            {
              "message": "=You are a calendar assistant. Parse this voice transcription and extract calendar event details.\n\nCurrent time: {{ $now.format('YYYY-MM-DD HH:mm') }}\nTimezone: {{ $now.timezone }}\n\nTranscription: \"{{ $json.text }}\"\n\nRules:\n- Always respond with valid JSON only\n- Default duration is 60 minutes\n- Parse relative times (tomorrow, next week, etc.)\n- If no time specified, default to 09:00\n\nResponse format:\n{\n  \"action\": \"create\",\n  \"title\": \"event title here\",\n  \"date\": \"YYYY-MM-DD\",\n  \"time\": \"HH:MM\", \n  \"duration\": 60,\n  \"description\": \"additional details if any\"\n}"
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 200
        }
      },
      "id": "llm-calendar-parser",
      "name": "LLM Calendar Parser",
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [1140, 180]
    },
    {
      "parameters": {
        "jsCode": "// Parse LLM response and extract JSON\nconst response = items[0].json.response || items[0].json.text || '';\nconst transcription = $('Transcribe Audio (Local Whisper)').item.json.text || 'N/A';\n\ntry {\n  // Try to extract JSON from response\n  const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    const eventData = JSON.parse(jsonMatch[0]);\n    \n    // Validate required fields\n    if (!eventData.title || !eventData.date) {\n      throw new Error('Missing required fields');\n    }\n    \n    // Default values\n    eventData.time = eventData.time || '09:00';\n    eventData.duration = eventData.duration || 60;\n    eventData.action = eventData.action || 'create';\n    \n    // Create datetime strings for Google Calendar\n    const startDateTime = `${eventData.date}T${eventData.time}:00`;\n    const endDateTime = new Date(\n      new Date(startDateTime).getTime() + (eventData.duration * 60000)\n    ).toISOString().substring(0, 19);\n    \n    return [{\n      json: {\n        ...eventData,\n        startDateTime,\n        endDateTime,\n        success: true,\n        originalTranscription: transcription\n      }\n    }];\n    \n  } else {\n    throw new Error('No JSON found in response');\n  }\n  \n} catch (error) {\n  return [{\n    json: {\n      success: false,\n      error: error.message,\n      originalResponse: response,\n      originalTranscription: transcription\n    }\n  }];\n}"
      },
      "id": "parse-llm-response",
      "name": "Parse LLM Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1360, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-parsing-success",
      "name": "Check Parsing Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1580, 180]
    },
    {
      "parameters": {
        "operation": "create",
        "calendarId": {
          "__rl": true,
          "value": "primary",
          "mode": "list",
          "cachedResultName": "Primary"
        },
        "start": "={{ $json.startDateTime }}",
        "end": "={{ $json.endDateTime }}",
        "summary": "={{ $json.title }}",
        "description": "=Created from voice message: {{ $json.originalTranscription }}\n\n{{ $json.description || '' }}"
      },
      "id": "create-calendar-event",
      "name": "Create Calendar Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.2,
      "position": [1800, 120]
    },
    {
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=‚úÖ **Event Created Successfully!**\n\nüìÖ **{{ $json.title }}**\nüóìÔ∏è Date: {{ $json.date }}\nüïí Time: {{ $json.time }}\n‚è±Ô∏è Duration: {{ $json.duration }} minutes\n\nüìù From: \"{{ $json.originalTranscription }}\""
      },
      "id": "send-success-message",
      "name": "Send Success Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [2020, 120],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credential",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "=‚ùå **Could not create event**\n\nüó£Ô∏è I heard: \"{{ $json.originalTranscription }}\"\n\n‚ùó Error: {{ $json.error }}\n\nüí° Try saying something like:\n\"Schedule meeting with John tomorrow at 2 PM for 1 hour\""
      },
      "id": "send-error-message",
      "name": "Send Error Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1800, 240],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credential",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendMessage",
        "chatId": "={{ $json.message.chat.id }}",
        "text": "üé§ Please send me a voice message to create a calendar event!\n\nüí° Try saying:\n‚Ä¢ \"Schedule dentist appointment tomorrow at 2 PM\"\n‚Ä¢ \"Meeting with Sarah next Monday at 10 AM for 2 hours\"\n‚Ä¢ \"Lunch with mom this Friday at noon\""
      },
      "id": "send-text-help",
      "name": "Send Help Message",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [700, 300],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-credential",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Check if Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Audio": {
      "main": [
        [
          {
            "node": "Get Audio File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Help Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Audio File": {
      "main": [
        [
          {
            "node": "Transcribe Audio (Local)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio (Local)": {
      "main": [
        [
          {
            "node": "LLM Calendar Parser",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Calendar Parser": {
      "main": [
        [
          {
            "node": "Parse LLM Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse LLM Response": {
      "main": [
        [
          {
            "node": "Check Parsing Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Parsing Success": {
      "main": [
        [
          {
            "node": "Create Calendar Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Calendar Event": {
      "main": [
        [
          {
            "node": "Send Success Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-01-12T00:00:00.000Z",
  "versionId": "1"
}
